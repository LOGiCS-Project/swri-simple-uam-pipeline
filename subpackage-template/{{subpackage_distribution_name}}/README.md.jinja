# {{ subpackage_name }}

{{ subpackage_description }}

**Note:** This entire file assumes you're already within this project's conda env.

## Setup

Run `invoke setup` while in `<repo_root>/{{ subpackage_distribution_name}}`.

## Installation

To use this package as a dependency in other subpackages:

```bash
pdm add -e ../{{ subpackage_distribution_name }}
```

Add the `-d` flag if you want it as a development-only dependency.

## Subproject Organization

```
<repo_root>
└──{{subpackage_distribution_name}}   # Subpackage Root Dir
   │
   ├── README.md        # This README file
   ├── pyproject.toml   # PDM managed project info
   ├── tasks.py         # Commands for project management, called with `invoke`
   │
   ├── config   # Assorted Config Files
   │   │
   │   ├── flake8.ini     # Code Quality
   │   ├── mypy.ini       # Type Checking
   │   ├── coverage.ini   # Test Coverage
   │   └── pytest.ini     # Testing
   │
   ├── src
   │   └── {{subpackage_import_name}}   # Root module for this package
   │       │
   │       ├── __init__.py   # Module Root
   │       ├── cli.py        # Entry Point for subpackage's CLI
   │       ├── __main__.py   # Stub wrapping cli.py (don't edit)
   │       └── py.typed      # Flag to indicate this module is typed
   │
   └── tests   # Testing Code
       │
       ├── __init__.py   # Module Root
       ├── conftest.py   # pytest configuration
       └── test_cli.py   # Minimal test of CLI functionality
```

## Development Commands

### Dependency Management

See instructions on [the PDM website](https://pdm.fming.dev/usage/dependency/).

PDM will work as expected for most operations.

### Running Tests

Run the full suite with: `invoke test`

Run a subset of tests with: `invoke test --match="<filter_string>"`

Generate a code coverage report with: `invoke coverage`

### Code Quality

Run type checking: `invoke check-types`

Run code linter: `invoke check-quality`

Run both of the above: `invoke check`

Run code formatter: `invoke format`

## Other

Clean temporary dev files: `invoke clean`